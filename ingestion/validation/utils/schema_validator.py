# Utilitaire de validation JSON/Avro
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
schema_validator.py
-------------------
Utilitaire de validation pour les sch√©mas JSON et Avro.
Ce module est utilis√© pour v√©rifier la conformit√© des messages entrants
avant ingestion dans Kafka, Delta Lake ou Data Warehouse.

Compatible avec :
 - Sch√©mas JSON (kyc_schema.json, crm_schema.json, transaction_schema.json)
 - Sch√©mas Avro (crm_customers.avsc, transactions.avsc)

Auteur : Salim Majide
Date : 2025-10-23
"""

import json
import avro.schema
import avro.io
import io
from jsonschema import validate, ValidationError
from typing import Any, Dict


# =========================
# üîπ Validation JSON Schema
# =========================
def validate_json(data: Dict[str, Any], schema_path: str) -> bool:
    """
    Valide un dictionnaire JSON selon un sch√©ma JSON.

    Args:
        data (dict): Donn√©es √† valider
        schema_path (str): Chemin vers le fichier sch√©ma (.json)

    Returns:
        bool: True si valide, sinon l√®ve une exception ValidationError
    """
    try:
        with open(schema_path, "r", encoding="utf-8") as f:
            schema = json.load(f)
        validate(instance=data, schema=schema)
        return True
    except ValidationError as e:
        print(f"[‚ùå] Erreur de validation JSON : {e.message}")
        return False
    except FileNotFoundError:
        print(f"[‚ö†Ô∏è] Fichier de sch√©ma introuvable : {schema_path}")
        return False


# =========================
# üîπ Validation Avro Schema
# =========================
def validate_avro(record: Dict[str, Any], schema_path: str) -> bool:
    """
    Valide un enregistrement selon un sch√©ma Avro.

    Args:
        record (dict): Donn√©es √† valider
        schema_path (str): Chemin vers le sch√©ma Avro (.avsc)

    Returns:
        bool: True si valide, False sinon
    """
    try:
        schema = avro.schema.parse(open(schema_path, "r", encoding="utf-8").read())
        writer = avro.io.DatumWriter(schema)
        bytes_writer = io.BytesIO()
        encoder = avro.io.BinaryEncoder(bytes_writer)
        writer.write(record, encoder)
        return True
    except avro.io.AvroTypeException as e:
        print(f"[‚ùå] Erreur de validation Avro : {e}")
        return False
    except Exception as e:
        print(f"[‚ö†Ô∏è] Erreur inattendue : {e}")
        return False


# =========================
# üîπ Fonction g√©n√©rique
# =========================
def validate_message(data: Dict[str, Any], schema_path: str) -> bool:
    """
    D√©termine automatiquement le type du sch√©ma (JSON ou Avro)
    et applique la validation correspondante.

    Args:
        data (dict): Donn√©es √† valider
        schema_path (str): Chemin du sch√©ma

    Returns:
        bool: True si valide, False sinon
    """
    if schema_path.endswith(".json"):
        return validate_json(data, schema_path)
    elif schema_path.endswith(".avsc"):
        return validate_avro(data, schema_path)
    else:
        print(f"[‚ö†Ô∏è] Type de sch√©ma non reconnu : {schema_path}")
        return False


# =========================
# üîπ Exemple d'utilisation
# =========================
if __name__ == "__main__":
    sample_crm = {
        "customer_id": 101,
        "name": "John Doe",
        "email": "john.doe@example.com",
        "created_at": "2025-10-23T10:00:00Z"
    }

    print("=== Test Validation CRM ===")
    result = validate_message(sample_crm, "schemas/json/crm_schema.json")
    print("R√©sultat :", "‚úÖ Valide" if result else "‚ùå Invalide")

    sample_txn = {
        "transaction_id": 555,
        "customer_id": 101,
        "amount": 120.5,
        "currency": "USD",
        "timestamp": "2025-10-23T11:00:00Z"
    }

    print("\n=== Test Validation Transaction ===")
    result = validate_message(sample_txn, "schemas/avro/transactions.avsc")
    print("R√©sultat :", "‚úÖ Valide" if result else "‚ùå Invalide")
